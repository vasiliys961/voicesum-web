# app.py - –í–µ—Ä—Å–∏—è –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
from flask import Flask, render_template, request, jsonify
import os
import tempfile
import whisper
from pydub import AudioSegment
from openai import OpenAI
import time
import logging
from httpx import Client as HttpxClient
import threading
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__, static_folder="static", template_folder="templates")
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100 MB

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
TEMP_DIR = tempfile.mkdtemp(prefix="voicesum_")
os.makedirs(TEMP_DIR, exist_ok=True)

logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {TEMP_DIR}")

# === –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
whisper_model = None
llm_client = None

def load_whisper_model():
    global whisper_model
    if whisper_model is None:
        logger.info("üéôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper (tiny –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)...")
        try:
            whisper_model = whisper.load_model("tiny", device="cpu")  # tiny –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å Whisper (tiny) –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
            raise
    return whisper_model

def load_llm_client():
    global llm_client
    if llm_client is None and OPENROUTER_API_KEY:
        try:
            llm_client = OpenAI(
                base_url="https://openrouter.ai/api/v1",
                api_key=OPENROUTER_API_KEY,
                http_client=HttpxClient(proxies=None, timeout=60.0),
            )
            logger.info("‚úÖ OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {e}")
            raise
    return llm_client

def split_audio_into_chunks(wav_path, chunk_duration_minutes=4):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –Ω–∞ –∫—É—Å–∫–∏ –ø–æ N –º–∏–Ω—É—Ç"""
    try:
        audio = AudioSegment.from_wav(wav_path)
        chunk_length_ms = chunk_duration_minutes * 60 * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        chunks = []
        total_duration_ms = len(audio)
        num_chunks = math.ceil(total_duration_ms / chunk_length_ms)

        logger.info(f"üìÅ –†–∞–∑–±–∏–≤–∞—é –∞—É–¥–∏–æ –Ω–∞ {num_chunks} —á–∞—Å—Ç–µ–π –ø–æ {chunk_duration_minutes} –º–∏–Ω")

        for i in range(num_chunks):
            start = i * chunk_length_ms
            end = min(start + chunk_length_ms, total_duration_ms)
            chunk = audio[start:end]
            
            chunk_path = os.path.join(TEMP_DIR, f"chunk_{i}_{int(time.time())}.wav")
            chunk.export(chunk_path, format="wav")
            chunks.append({
                'path': chunk_path,
                'index': i,
                'start_time': start / 1000,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                'duration': len(chunk) / 1000
            })
        
        return chunks, total_duration_ms / 1000  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
        raise

def transcribe_chunk_with_timeout(chunk_info, timeout_seconds=60):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫—É—Å–æ–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    def transcribe_thread():
        nonlocal result, error
        try:
            model = load_whisper_model()
            transcript_result = model.transcribe(
                chunk_info['path'], 
                language=None, 
                fp16=False, 
                verbose=False
            )
            result = transcript_result["text"].strip()
        except Exception as e:
            error = e

    result = None
    error = None
    
    thread = threading.Thread(target=transcribe_thread)
    thread.daemon = True
    thread.start()
    thread.join(timeout_seconds)
    
    if thread.is_alive():
        logger.error(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∫—É—Å–∫–∞ {chunk_info['index']} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç")
        return f"[–ö—É—Å–æ–∫ {chunk_info['index']+1}: —Ç–∞–π–º–∞—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏]"
    
    if error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∫—É—Å–∫–∞ {chunk_info['index']}: {error}")
        return f"[–ö—É—Å–æ–∫ {chunk_info['index']+1}: –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏]"
    
    return result or f"[–ö—É—Å–æ–∫ {chunk_info['index']+1}: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç]"

def transcribe_long_audio(wav_path):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ –ø–æ —á–∞—Å—Ç—è–º"""
    chunks, total_duration = split_audio_into_chunks(wav_path, chunk_duration_minutes=4)
    full_transcript = ""
    successful_chunks = 0
    
    logger.info(f"üéôÔ∏è –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é {len(chunks)} —á–∞—Å—Ç–µ–π...")
    
    for i, chunk_info in enumerate(chunks):
        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞—Å—Ç—å {i+1}/{len(chunks)} ({chunk_info['duration']:.1f}—Å)")
            
            transcript = transcribe_chunk_with_timeout(chunk_info, timeout_seconds=45)
            
            if transcript and not transcript.startswith("[–ö—É—Å–æ–∫"):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                start_min = int(chunk_info['start_time'] // 60)
                start_sec = int(chunk_info['start_time'] % 60)
                full_transcript += f"\n\n[{start_min:02d}:{start_sec:02d}] {transcript}"
                successful_chunks += 1
            else:
                full_transcript += f"\n\n{transcript}"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {e}")
            full_transcript += f"\n\n[–ß–∞—Å—Ç—å {i+1}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏]"
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—É—Å–∫–∞
            if os.path.exists(chunk_info['path']):
                os.remove(chunk_info['path'])
    
    logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful_chunks}/{len(chunks)} —á–∞—Å—Ç–µ–π —É—Å–ø–µ—à–Ω–æ")
    return full_transcript.strip(), successful_chunks, len(chunks), total_duration

def generate_long_summary(text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    try:
        client = load_llm_client()
        if not client:
            return "–†–µ–∑—é–º–µ: API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        # –î–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 15000 —Å–∏–º–≤–æ–ª–æ–≤
        text_for_summary = text[:15000]
        if len(text) > 15000:
            text_for_summary += "\n\n[...—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...]"
        
        response = client.chat.completions.create(
            model="anthropic/claude-3-haiku",
            messages=[
                {
                    "role": "system", 
                    "content": (
                        "–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –¥–ª–∏–Ω–Ω–æ–π –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                        "–í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã, –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, —Ä–µ—à–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥—ã. "
                        "–û—Ä–≥–∞–Ω–∏–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º."
                    )
                },
                {"role": "user", "content": f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª–∏–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏:\n\n{text_for_summary}"}
            ],
            max_tokens=800,  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑—é–º–µ: {e}")
        return f"–†–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {str(e)[:100]}"

# === –ú–∞—Ä—à—Ä—É—Ç—ã ===

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/health")
def health():
    return jsonify({
        "status": "ok",
        "whisper_loaded": whisper_model is not None,
        "model": "tiny-chunks",
        "openrouter_configured": OPENROUTER_API_KEY is not None,
        "max_file_size": "100MB",
        "max_duration": "unlimited",
        "chunk_size": "4min"
    })

@app.route("/transcribe", methods=["POST"])
def transcribe():
    start_time = time.time()
    input_path = None
    wav_path = None
    
    try:
        if 'audio' not in request.files:
            return jsonify({"error": "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"}), 400

        file = request.files['audio']
        if file.filename == '':
            return jsonify({"error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"}), 400

        timestamp = int(time.time() * 1000)
        input_path = os.path.join(TEMP_DIR, f"input_{timestamp}.tmp")
        wav_path = os.path.join(TEMP_DIR, f"converted_{timestamp}.wav")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file.save(input_path)
        file_size = os.path.getsize(input_path)
        logger.info(f"üì• –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_size / 1024 / 1024:.1f} MB")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        logger.info("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ...")
        audio = AudioSegment.from_file(input_path)
        original_duration = len(audio) / 1000 / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {original_duration:.1f} –º–∏–Ω—É—Ç")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        audio = audio.set_frame_rate(16000).set_channels(1)
        audio.export(wav_path, format="wav")
        
        logger.info("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        transcript, successful_chunks, total_chunks, duration = transcribe_long_audio(wav_path)
        
        if not transcript or len(transcript.strip()) < 10:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é"}), 400

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
        logger.info("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∑—é–º–µ...")
        summary = generate_long_summary(transcript)
        
        total_time = time.time() - start_time
        logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time/60:.1f} –º–∏–Ω—É—Ç")

        return jsonify({
            "transcript": transcript,
            "summary": summary,
            "statistics": {
                "processing_time": f"{total_time:.1f}s",
                "processing_time_min": f"{total_time/60:.1f}min",
                "audio_duration": f"{duration/60:.1f}min",
                "file_size": f"{file_size / 1024 / 1024:.1f}MB",
                "successful_chunks": successful_chunks,
                "total_chunks": total_chunks,
                "success_rate": f"{successful_chunks/total_chunks*100:.1f}%"
            },
            "model_used": "whisper-tiny-chunks"
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞: {str(e)[:150]}"}), 500
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        for path in [input_path, wav_path]:
            if path and os.path.exists(path):
                try:
                    os.remove(path)
                except:
                    pass

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    app.run(host="0.0.0.0", port=port, debug=False, threaded=True)
