# app.py - –û–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from flask import Flask, render_template, request, jsonify
import os
import tempfile
import whisper
from pydub import AudioSegment
from openai import OpenAI
import time
import math
import logging
from httpx import Client as HttpxClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__, static_folder="static", template_folder="templates")
app.config['MAX_CONTENT_LENGTH'] = 25 * 1024 * 1024  # 25 MB

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
TEMP_DIR = tempfile.mkdtemp(prefix="voicesum_")
os.makedirs(TEMP_DIR, exist_ok=True)

logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {TEMP_DIR}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –õ–ï–ì–ö–û–ô –º–æ–¥–µ–ª–∏ Whisper ===
logger.info("üéôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper (tiny)...")
try:
    whisper_model = whisper.load_model("tiny", device="cpu")  # –°–ê–ú–ê–Ø –õ–ï–ì–ö–ê–Ø –ú–û–î–ï–õ–¨
    logger.info("‚úÖ –ú–æ–¥–µ–ª—å Whisper (tiny) –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
    whisper_model = None

# === –ö–ª–∏–µ–Ω—Ç OpenRouter ===
llm_client = None
if OPENROUTER_API_KEY:
    try:
        llm_client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=OPENROUTER_API_KEY,
            http_client=HttpxClient(proxies=None, timeout=30.0),
        )
        logger.info("‚úÖ OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {e}")

# === –§—É–Ω–∫—Ü–∏–∏ ===

def transcribe_audio_simple(wav_path):
    """–ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –±–µ–∑ –Ω–∞—Ä–µ–∑–∫–∏"""
    if not whisper_model:
        raise Exception("–ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    try:
        result = whisper_model.transcribe(wav_path, language=None, fp16=False)
        return result["text"].strip()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        raise

def generate_summary_simple(text):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ"""
    if not llm_client:
        return "–†–µ–∑—é–º–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
    
    try:
        response = llm_client.chat.completions.create(
            model="anthropic/claude-3-haiku",
            messages=[
                {"role": "system", "content": "–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."},
                {"role": "user", "content": f"–¢–µ–∫—Å—Ç: {text[:5000]}"}
            ],
            max_tokens=200,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑—é–º–µ: {e}")
        return f"–û—à–∏–±–∫–∞ —Ä–µ–∑—é–º–µ: {str(e)[:100]}"

# === –ú–∞—Ä—à—Ä—É—Ç—ã ===

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/health")
def health():
    return jsonify({
        "status": "ok",
        "whisper_loaded": whisper_model is not None,
        "openrouter_configured": llm_client is not None,
        "model": "tiny"
    })

@app.route("/transcribe", methods=["POST"])
def transcribe():
    if not whisper_model:
        return jsonify({"error": "–ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}), 500
        
    if 'audio' not in request.files:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"}), 400

    file = request.files['audio']
    if file.filename == '':
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"}), 400

    input_path = os.path.join(TEMP_DIR, f"input_{int(time.time())}.tmp")
    wav_path = os.path.join(TEMP_DIR, f"converted_{int(time.time())}.wav")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file.save(input_path)
        logger.info(f"üì• –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {input_path}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        audio = AudioSegment.from_file(input_path)
        audio = audio.set_frame_rate(16000).set_channels(1)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç –¥–ª—è tiny –º–æ–¥–µ–ª–∏
        if len(audio) > 120000:  # 2 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            audio = audio[:120000]
            logger.info("‚è±Ô∏è –ê—É–¥–∏–æ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 2 –º–∏–Ω—É—Ç")
        
        audio.export(wav_path, format="wav")
        logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        transcript = transcribe_audio_simple(wav_path)
        if not transcript:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"}), 400

        # –†–µ–∑—é–º–µ
        summary = generate_summary_simple(transcript)

        return jsonify({
            "transcript": transcript,
            "summary": summary,
            "model_used": "whisper-tiny"
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞: {e}"}), 500
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        for path in [input_path, wav_path]:
            if os.path.exists(path):
                os.remove(path)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    app.run(host="0.0.0.0", port=port, debug=False, threaded=True)
