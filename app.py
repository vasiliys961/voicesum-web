# app.py
from flask import Flask, render_template, request, jsonify
import os
import tempfile
from pydub import AudioSegment
from openai import OpenAI
import time
import math
import logging
from httpx import Client as HttpxClient

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100 MB

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
TEMP_DIR = tempfile.mkdtemp(prefix="voicesum_")
os.makedirs(TEMP_DIR, exist_ok=True)

logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {TEMP_DIR}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper (tiny) ===
logger.info("üéôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper (tiny)...")
whisper_model = whisper.load_model("tiny", device="cpu")
logger.info("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

# === –ö–ª–∏–µ–Ω—Ç OpenRouter (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ) ===
llm_client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
    http_client=HttpxClient(timeout=30.0),
)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def split_audio(wav_path, chunk_length_sec=300):
    try:
        audio = AudioSegment.from_wav(wav_path)
        chunk_length_ms = chunk_length_sec * 1000
        chunks = []
        total_duration_ms = len(audio)
        num_chunks = math.ceil(total_duration_ms / chunk_length_ms)

        for i in range(num_chunks):
            start = i * chunk_length_ms
            end = min(start + chunk_length_ms, total_duration_ms)
            chunk = audio[start:end]
            chunk_path = os.path.join(TEMP_DIR, f"chunk_{i}_{int(time.time())}.wav")
            chunk.export(chunk_path, format="wav")
            chunks.append(chunk_path)
        logger.info(f"‚úÇÔ∏è –ê—É–¥–∏–æ –Ω–∞—Ä–µ–∑–∞–Ω–æ –Ω–∞ {len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –ø–æ ~{chunk_length_sec} —Å–µ–∫.")
        return chunks
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Ä–µ–∑–∫–∏ –∞—É–¥–∏–æ: {e}")
        raise

def transcribe_very_long_audio(wav_path):
    full_transcript = ""
    chunk_paths = split_audio(wav_path)

    for i, chunk_path in enumerate(chunk_paths):
        try:
            if os.path.getsize(chunk_path) == 0:
                full_transcript += f"[–§—Ä–∞–≥–º–µ–Ω—Ç {i+1} –ø—É—Å—Ç] "
                continue

            result = whisper_model.transcribe(
                chunk_path,
                language=None,
                fp16=False,
                verbose=False
            )
            text = result["text"].strip()
            if text:
                full_transcript += text + " "
            else:
                full_transcript += f"[–§—Ä–∞–≥–º–µ–Ω—Ç {i+1} ‚Äî —Ä–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞] "
        except Exception as e:
            error_msg = f"[–û—à–∏–±–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {i+1}: {str(e)[:50]}...] "
            full_transcript += error_msg
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        finally:
            if os.path.exists(chunk_path):
                os.remove(chunk_path)
    return full_transcript.strip()

def generate_summary(text):
    try:
        response = llm_client.chat.completions.create(
            model="anthropic/claude-3-haiku",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –∑–∞ 5‚Äì8 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫ –≤—ã–¥–∞—Ç—å —Å–∂–∞—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏. "
                        "–ù–∏–∫–∞–∫–∏—Ö —ç–º–æ–¥–∑–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ñ—Ä–∞–∑, –≤–≤–æ–¥–Ω—ã—Ö –≤—Ä–æ–¥–µ ¬´–ò—Ç–æ–≥:¬ª. –ï—Å–ª–∏ —Ñ–∞–∫—Ç–∞ –Ω–µ—Ç ‚Äî –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π. –û–±—ä–µ–¥–∏–Ω—è–π –¥—É–±–ª–∏ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–±–æ–±—â—ë–Ω–Ω–æ."
                    )
                },
                {
                    "role": "user",
                    "content": (
                        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–ª–∏ –¥–æ–∫–ª–∞–¥ –Ω–∏–∂–µ –∏ –≤—ã–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        f"–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º 220 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                        f"3‚Äì5 –º–∞—Ä–∫–µ—Ä–æ–≤, –∫–∞–∂–¥—ã–π –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: —Ä–µ—à–µ–Ω–∏—è / –¥–µ–π—Å—Ç–≤–∏—è / –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ / —Ç–µ–º—ã. –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—ë. –ï—Å–ª–∏ –ø—É–Ω–∫—Ç–æ–≤ –º–Ω–æ–≥–æ ‚Äî —Å–≥—Ä—É–ø–ø–∏—Ä—É–π –∏ –æ—Å—Ç–∞–≤—å —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.\n"
                        f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç–∏–ª—é:\n"
                        f"–ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –≥–ª–∞–≥–æ–ª—ã –≤ –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–º –∏–ª–∏ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤–µ (–¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π).\n"
                        f"–ë–µ–∑ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π –∏ —Å–æ–≤–µ—Ç–æ–≤, —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n"
                        f"–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.\n"
                        f"–ù–µ –ø—Ä–µ–≤—ã—à–∞–π 6 —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–∑—é–º–µ.\n"
                        f"–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (—Å—Ç—Ä–æ–≥–æ):\n"
                        f"–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: <1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>\n"
                        f"‚Äî –†–µ—à–µ–Ω–∏—è: <–∫—Ä–∞—Ç–∫–æ>\n"
                        f"‚Äî –î–µ–π—Å—Ç–≤–∏—è: <–∫—Ä–∞—Ç–∫–æ>\n"
                        f"‚Äî –î–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏: <–∫—Ä–∞—Ç–∫–æ>\n"
                        f"‚Äî –¢–µ–º—ã: <–∫—Ä–∞—Ç–∫–æ>\n\n"
                        f"–†–∞–∑–≥–æ–≤–æ—Ä:\n\n{text[:12000]}"
                    )
                }
            ],
            max_tokens=500,
            temperature=0.2
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ: {e}"

# === –ú–∞—Ä—à—Ä—É—Ç—ã ===

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/transcribe", methods=["POST"])
def transcribe():
    if 'audio' not in request.files:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"}), 400

    file = request.files['audio']
    if file.filename == '':
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"}), 400

    input_path = os.path.join(TEMP_DIR, file.filename)
    try:
        file.save(input_path)
        logger.info(f"üì• –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {input_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª"}), 500

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV 16kHz mono
    wav_path = os.path.join(TEMP_DIR, f"{int(time.time())}.wav")
    try:
        audio = AudioSegment.from_file(input_path)
        audio = audio.set_frame_rate(16000).set_channels(1)
        audio.export(wav_path, format="wav")
        logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {wav_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"}), 500
    finally:
        if os.path.exists(input_path):
            os.remove(input_path)

    try:
        transcript = transcribe_very_long_audio(wav_path)
        if os.path.exists(wav_path):
            os.remove(wav_path)
        if not transcript:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"}), 400

        summary = generate_summary(transcript)

        return jsonify({
            "transcript": transcript,
            "summary": summary
        })
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"}), 500

# === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)