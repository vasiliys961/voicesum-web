# app.py
from flask import Flask, render_template, request, jsonify
import os
import tempfile
import openai
from pydub import AudioSegment
import time
import logging
from httpx import Client as HttpxClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100 MB

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OPENROUTER_API_KEY = "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"
TEMP_DIR = tempfile.mkdtemp(prefix="voicesum_")
os.makedirs(TEMP_DIR, exist_ok=True)

logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {TEMP_DIR}")

# === –ö–ª–∏–µ–Ω—Ç OpenRouter (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞—É–¥–∏–æ!) ===
client = openai.OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
    http_client=HttpxClient(timeout=60.0),
)

# === –ú–∞—Ä—à—Ä—É—Ç—ã ===

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/transcribe", methods=["POST"])
def transcribe():
    if 'audio' not in request.files:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"}), 400

    file = request.files['audio']
    if file.filename == '':
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"}), 400

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    input_path = os.path.join(TEMP_DIR, file.filename)
    try:
        file.save(input_path)
        logger.info(f"üì• –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {input_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª"}), 500

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é –≤ OpenRouter ‚Äî –æ–Ω —Å–∞–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç!
        response = client.chat.completions.create(
            model="openai/whisper-v3",  # ‚Üê —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç–æ –∞—É–¥–∏–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                        },
                        {
                            "type": "audio",
                            "audio": {
                                "url": f"file://{input_path}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=256
        )
        transcript = response.choices[0].message.content.strip()
        logger.info("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}"}), 500
    finally:
        if os.path.exists(input_path):
            os.remove(input_path)

    if not transcript:
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"}), 400

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ Claude
        summary_response = client.chat.completions.create(
            model="anthropic/claude-3-haiku",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –∑–∞ 5‚Äì8 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫ –≤—ã–¥–∞—Ç—å —Å–∂–∞—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏. "
                        "–ù–∏–∫–∞–∫–∏—Ö —ç–º–æ–¥–∑–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ñ—Ä–∞–∑, –≤–≤–æ–¥–Ω—ã—Ö –≤—Ä–æ–¥–µ ¬´–ò—Ç–æ–≥:¬ª. –ï—Å–ª–∏ —Ñ–∞–∫—Ç–∞ –Ω–µ—Ç ‚Äî –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π. –û–±—ä–µ–¥–∏–Ω—è–π –¥—É–±–ª–∏ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–±–æ–±—â—ë–Ω–Ω–æ."
                    )
                },
                {
                    "role": "user",
                    "content": (
                        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–ª–∏ –¥–æ–∫–ª–∞–¥ –Ω–∏–∂–µ –∏ –≤—ã–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        f"–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º 220 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                        f"3‚Äì5 –º–∞—Ä–∫–µ—Ä–æ–≤, –∫–∞–∂–¥—ã–π –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: —Ä–µ—à–µ–Ω–∏—è / –¥–µ–π—Å—Ç–≤–∏—è / –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ / —Ç–µ–º—ã. –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏ –µ—ë. –ï—Å–ª–∏ –ø—É–Ω–∫—Ç–æ–≤ –º–Ω–æ–≥–æ ‚Äî —Å–≥—Ä—É–ø–ø–∏—Ä—É–π –∏ –æ—Å—Ç–∞–≤—å —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.\n"
                        f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç–∏–ª—é:\n"
                        f"–ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –≥–ª–∞–≥–æ–ª—ã –≤ –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–º –∏–ª–∏ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤–µ (–¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π).\n"
                        f"–ë–µ–∑ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π –∏ —Å–æ–≤–µ—Ç–æ–≤, —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n"
                        f"–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.\n"
                        f"–ù–µ –ø—Ä–µ–≤—ã—à–∞–π 6 —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–∑—é–º–µ.\n"
                        f"–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (—Å—Ç—Ä–æ–≥–æ):\n"
                        f"–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: <1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>\n"
                        f"‚Äî –†–µ—à–µ–Ω–∏—è: <–∫—Ä–∞—Ç–∫–æ>\n"
                        f"‚Äî –î–µ–π—Å—Ç–≤–∏—è: <–∫—Ä–∞—Ç–∫–æ>\n"
                        f"‚Äî –î–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏: <–∫—Ä–∞—Ç–∫–æ>\n"
                        f"‚Äî –¢–µ–º—ã: <–∫—Ä–∞—Ç–∫–æ>\n\n"
                        f"–†–∞–∑–≥–æ–≤–æ—Ä:\n\n{transcript[:12000]}"
                    )
                }
            ],
            max_tokens=500,
            temperature=0.2
        )
        summary = summary_response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
        summary = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ: {e}"

    return jsonify({
        "transcript": transcript,
        "summary": summary
    })

# === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)